# -*- coding: utf-8 -*-
"""hangman_game_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KnymOnViPtjTx2cQmaITGU-5F7_v04-A
"""

import random


def init_game():
    # hangman drawing
    empty = ['\u2554','\u2550','\u2550','\u2557','\u0020','\n',
            '\u2551','\u0020','\u0020','\u007c','\u0020','\n',
            '\u2551','\u0020','\u0020','\u0020','\u0020','\n',
            '\u2551','\u0020','\u0020','\u0020','\u0020','\n',
            '\u2551','\u0020','\u0020','\u0020','\u0020']
    positions = [15, 20, 21, 22, 26, 28]
    man = ['\u004f','\u002f','\u007c','\u005c','\u002f','\u005c']

    # word lists
    easy_words = ["CAT", "DOG", "SUN", "RED", "JUMP", "FISH", "BOOK",
                "TREE", "BALL", "HAPPY", "SMILE", "SONG", "RAIN",
                "SNOW", "BLUE", "RUN", "SLEEP", "STAR", "GAME", "FUN"]
    easy_long_words = ["BANANA", "ELEPHANT", "BUTTERFLY", "TELEPHONE",
                    "COMPUTER", "CRAYON", "CHOCOLATE", "GARDEN",
                    "LEMONADE", "PUZZLE", "BALLOON", "HAPPINESS",
                    "RAINBOW", "JELLYFISH", "HOLIDAY", "SUNSHINE",
                    "PLAYGROUND", "LULLABY", "CATERPILLAR", "WATERMELON"]
    challenging_words = ["JAZZ", "EXQUISITE", "MYSTERY", "BUZZWORD", "GIZMO",
                        "QUIRK", "JUKEBOX", "LUCKY", "JUMBLE", "ZEPHYR",
                        "QUARTZ", "FLUENT", "PIZAZZ", "SYZYGY", "JINX",
                        "VORTEX", "PUZZLE", "ZIGZAG", "KALEIDOSCOPE", "WHIZZ"]
    levels = [easy_words, easy_long_words, challenging_words]

    return empty, positions, man, levels


def welcome_screen():
    print('Welcome to HANGMAN!')
    print('-------------------')
    print('''You have several gaming options:
    1. If you want to play with your own custom word, enter 1 (default).
    2. If you want to play against the computer, enter 2. \n''')

    option = input()

    if option == '1':
        s = input('Enter the word you want to guess: \n')
    else:
        print('''Choose your difficulty:
        EASY   - enter 1
        MEDIUM - enter 2
        HARD   - enter 3 \n''')
        level = int(input())
        word_list = levels[level-1]
        s = random.choice(word_list)
    return s


def hide_word(s):
    word = s.upper()
    hidden = '-' * len(word)
    lifes = 6
    attempts = []
    return word, hidden, lifes, attempts


def hangman(word, hidden, lifes, attempts, empty, positions, man, levels):
    # print(word, hidden)
    # print(attempts)

    print(f'The hidden word is:   {str(hidden)}')
    print(f'You have - {lifes} - lifes left.')
    print(''.join(empty))

    while lifes > 0:
        # print('\n')
        print('''\n---------------\n''')
        nxt = input('Enter your next letter or solve word: ')
        nxt = nxt.upper()

        if len(nxt) == 0:
            print('Invalid entry! Try again!')
            print(f'You have - {lifes} - lifes left.')

        elif len(nxt) == 1:
            if nxt in attempts:
                print('You already found this letter. Try again!')

            elif nxt in word:
                attempts.append(nxt)
                print('You found a new letter.')

                # get indexes
                idx = []
                i = 0
                for ltr in word:
                    if ltr == nxt:
                        idx.append(i)
                    i += 1

                # update hidden
                hidden_list = list(hidden)
                for i in idx:
                    hidden_list[i] = nxt
                hidden = ''.join(hidden_list)
                if hidden == word:
                    print(f'YOU WON! The word is indeed:   {word}')
                    break
                else:
                    print(f'The hidden word is:   {hidden}')
                    print(f'You have - {lifes} - lifes left.')

            else:
                lifes -= 1
                attempts.append(nxt)
                print('Incorrect letter!')
                print(f'The hidden word is:   {hidden}')
                print(f'You have - {lifes} - lifes left.')
                empty[positions[-lifes-1]] = man[-lifes-1]
                print(''.join(empty))

        else:
            if nxt in attempts:
                print('You already tried this word. Try again!')

            elif nxt == word:
                print(f'YOU WON! The word is indeed:   {word}')
                break
            else:
                lifes -= 1
                attempts.append(nxt)
                print('Incorrect word!')
                print(f'You have - {lifes} - lifes left.')
                empty[positions[-lifes-1]] = man[-lifes-1]
                print(''.join(empty))

        attempts_string = ' '.join(attempts)
        print(f'Your attempts so far:   {attempts_string}')

        if lifes == 0:
            print('GAME OVER!')
            print(f'The correct word was:   {word}')
            break

empty, positions, man, levels = init_game()
s = welcome_screen()
word, hidden, lifes, attempts = hide_word(s)

hangman(word, hidden, lifes, attempts, empty, positions, man, levels)

